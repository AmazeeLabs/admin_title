<?php

use Drupal\admin_title\Element\AdminTitleEntityAutocomplete;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\Node;

/**
 * Implement hook_form_alter().
 */
function admin_title_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Detect content entity form.
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityFormInterface) {
    $entity = $form_object->getEntity();
    if ($entity instanceof ContentEntityInterface) {
      $args = _admin_title_get_common_args($entity);

      // Update form title.
      if ($entity->isNew()) {
        $form['#title'] = $args['@bundle'] === NULL
          ? t('Create @entity_type', $args)
          : t('Create @bundle (@entity_type)', $args);
      }
      elseif (!$entity->isTranslatable()) {
        $form['#title'] = $args['@bundle'] === NULL
          ? t('Edit @entity_type "@title"', $args)
          : t('Edit @bundle "@title" (@entity_type)', $args);
      }
      else {
        $languages = \Drupal::languageManager()->getLanguages();
        $original_langcode = $entity->getUntranslated()->language()->getId();
        $source_langcode = NULL;
        if ($source = $form_state->get(['content_translation', 'source'])) {
          $source_langcode = $source->getId();
        }
        $target_langcode = $form_object->getFormLangcode($form_state);
        $args += ['%language' => $languages[$target_langcode]->getName()];
        if ($original_langcode == $target_langcode) {
          $form['#title'] = $args['@bundle'] === NULL
            ? t('Edit %language translation of @entity_type "@title" (original language)', $args)
            : t('Edit %language translation (original language) of @bundle "@title" (@entity_type)', $args);
        }
        elseif ($source_langcode === NULL) {
          $form['#title'] = $args['@bundle'] === NULL
            ? t('Edit %language translation of @entity_type "@title"', $args)
            : t('Edit %language translation of @bundle "@title" (@entity_type)', $args);
        }
        else {
          $form['#title'] = $args['@bundle'] === NULL
            ? t('Create %language translation of @entity_type "@title"', $args)
            : t('Create %language translation of @bundle "@title" (@entity_type)', $args);
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function admin_title_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['admin_title'];
    unset($implementations['admin_title']);
    $implementations['admin_title'] = $group;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function admin_title_field_widget_entity_reference_autocomplete_form_alter(&$element, FormStateInterface $form_state, $context) {
  $element['target_id']['#type'] = 'entity_autocomplete_admin_title';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function admin_title_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add "Translation" column to the table.
  $form['terms']['#header'][] = t('Languages');
  foreach (Element::children($form['terms']) as $key) {
    /** @var \Drupal\taxonomy\Entity\Term $term */
    $term = $form['terms'][$key]['#term'];
    $original_language = $term->getTranslation(LanguageInterface::LANGCODE_DEFAULT)->language();
    $languages = [];
    foreach ($term->getTranslationLanguages() as $translation_language) {
      $languages[] = $original_language->getId() ==  $translation_language->getId()
        ? '<em>' . $translation_language->getName() . '</em>'
        : $translation_language->getName();
    }
    $form['terms'][$key]['languages'] = ['#markup' => implode(', ', $languages)];
  }
}

/**
 * Returns common arguments to be used in entity form titles.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *
 * @return array
 *   An array with the following keys:
 *   - "@entity_type": entity type human name
 *   - "@bundle": bundle human name, or NULL if entity type is not bundleable
 *   - "@title": value of field_admin_title, or entity label
 */
function _admin_title_get_common_args(ContentEntityInterface $entity) {
  $entity_type = $entity->getEntityType()->getLabel();
  $bundle = NULL;
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity->getEntityTypeId());
  if (count($bundle_info) > 1) {
    if (isset($bundle_info[$entity->bundle()]['label'])) {
      $bundle = $bundle_info[$entity->bundle()]['label'];
    }
  }
  return [
    '@entity_type' => $entity_type,
    '@bundle' => $bundle,
    '@title' => _admin_title_get_admin_title($entity, TRUE, FALSE),
  ];
}

/**
 * Returns admin title of an entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param bool $fallback_to_label
 * @param bool $translate
 * @param string|null $translation_langcode
 *
 * @return null|string
 */
function _admin_title_get_admin_title(EntityInterface $entity, $fallback_to_label, $translate, $translation_langcode = NULL) {
  if ($translate) {
    $entity = \Drupal::service('entity.repository')->getTranslationFromContext($entity, $translation_langcode);
  }
  $admin_title = NULL;
  if ($entity instanceof FieldableEntityInterface && $entity->hasField('field_admin_title')) {
    $admin_title_field = $entity->get('field_admin_title');
    if (!$admin_title_field->isEmpty() && isset($admin_title_field->value) && is_string($admin_title_field->value)) {
      $admin_title = $admin_title_field->value;
    }
  }
  return $admin_title === NULL && $fallback_to_label
    ? $entity->label()
    : $admin_title;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function admin_title_field_widget_link_default_form_alter(&$element, FormStateInterface $form_state, $context) {

  // On link widgets, replace default value with the one respecting admin title.
  if (
    isset($element['uri']['#default_value']) &&
    trim($element['uri']['#default_value']) !== '' &&
    isset($context['items']) &&
    isset($context['delta'])
  ) {
    $delta = $context['delta'];
    /** @var \Drupal\Core\Field\FieldItemList $items */
    $items = $context['items'];
    $uri = $items->get($delta)->uri;
    $scheme = parse_url($uri, PHP_URL_SCHEME);
    if ($scheme === 'entity') {
      list($entity_type, $entity_id) = explode('/', substr($uri, 7), 2);
      /** @var \Drupal\node\Entity\Node $node */
      if ($entity_type == 'node' && $node = Node::load($entity_id)) {
        $element['uri']['#default_value'] = AdminTitleEntityAutocomplete::getEntityLabels([$node]);
      }
    }
  }
}
